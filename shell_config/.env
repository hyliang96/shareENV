#!/usr/bin/zsh

[ $DotFileDebug -ne 0 ] && echo share .env  >&2

# language
# export LANG=en_US.UTF-8
# export LANGUAGE=
# export LC_CTYPE="en_US.UTF-8"
# export LC_NUMERIC="en_US.UTF-8"
# export LC_TIME="en_US.UTF-8"
# export LC_COLLATE="en_US.UTF-8"
# export LC_MONETARY="en_US.UTF-8"
# export LC_MESSAGES="en_US.UTF-8"
# export LC_PAPER="en_US.UTF-8"
# export LC_NAME="en_US.UTF-8"
# export LC_ADDRESS="en_US.UTF-8"
# export LC_TELEPHONE="en_US.UTF-8"
# export LC_MEASUREMENT="en_US.UTF-8"
# export LC_IDENTIFICATION="en_US.UTF-8"
# export LC_ALL=
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
# 时区
export TZ='Asia/Shanghai'

# sync shared files with all linux, mac, wls computers

_syncENV()
{
    local ENV_path=$1
    local lock_path=$2
    local sync_func=$3

    if ! [ -d $ENV_path ]; then
        echo $ENV_path not exists
    elif [ -f $lock_path ]; then
        echo $ENV_path is syncing now
    else
        echo "$sync_func $ENV_path"

        touch $lock_path
        local tmp_path=`pwd`
        cd $ENV_path

        $sync_func

        cd $tmp_path
        rm $lock_path
    fi
}

_pull()
{
    git pull origin master --quiet
}
_push()
{
    if ! [ -z "$(git status --porcelain)" ]; then
    # 还未commit
        git add -A && \
        git commit -m "logout push $(hostname) $(date "+%Y-%m-%d %H:%M:%S")" --quiet && \
        git push origin master --quiet;
    elif ! [ -z "$(git cherry -v)" ]; then
    # 已经commit，但本地领先远程仓库，需要push
        git push origin master --quiet
    fi
}

_test()
{
    echo testing
}

testENVpull()
{
    _syncENV $shareENV $sync_ENV_log/.shareENV.lock _test
}
testENVpush()
{
    _syncENV $shareENV $sync_ENV_log/.shareENV.lock _test
}

shareENVpull()
{
    _syncENV $shareENV $sync_ENV_log/.shareENV.lock _pull
}
shareENVpush()
{
    _syncENV $shareENV $sync_ENV_log/.shareENV.lock _push
}

serverENVpull()
{
    _syncENV $serverENV $sync_ENV_log/.serverENV.lock _pull
}
serverENVpush()
{
    _syncENV $serverENV $sync_ENV_log/.serverENV.lock _push
}
serverENV_private_pull()
{
    _syncENV $serverENV/serverENV_private $sync_ENV_log/.ss.lock _pull
}
serverENV_private_push()
{
    _syncENV $serverENV/serverENV_private $sync_ENV_log/.ss.lock _push
}
vim_pull()
{
    _syncENV $shareENV/app_config/vim $sync_ENV_log/.vim.lock _pull
}
vim_push()
{
    _syncENV $shareENV/app_config/vim $sync_ENV_log/.vim.lock _push
}

# login logout

_login_sync()
{
    # 不在tmux中，的登录才设置链接和做备份
    if ! [ -n "$TMUX" ];  then
        echo "======= login_sync start  `date '+%F %T'` ======="
        shareENVpull     # mac、linux、wls的配置文件同步
        vim_pull         # vim的配置
        serverENVpull    # 服务器的配置文件同步
        serverENV_private_pull          # 翻墙账号同步
        [ -f ~/.shell_config/.aliases ] && . ~/.shell_config/.aliases
        echo "======= login_sync end    `date '+%F %T'` ======="
    fi
}
login_sync()
{
    mkdir -p $sync_ENV_log
    (  _login_sync & ) >> $sync_ENV_log/login.log 2>&1
}

_logout_sync()
{
    # 不在tmux中，登出才做备份
    if ! [ -n "$TMUX" ];  then
        echo "======= logout_sync start `date '+%F %T'` ======="
        vim_push         # vim的配置
        shareENVpush     # mac、linux、wls的配置文件同步
        serverENV_private_push # 翻号同步
        serverENVpush    # 服务器的配置文件同步
        echo "======= logout_sync end    `date '+%F %T'` ======="
    fi
}
logout_sync()
{
    mkdir -p $sync_ENV_log
    (  _logout_sync & ) >> $sync_ENV_log/logout.log 2>&1
}
