#!/usr/bin/env zsh
[ ! $DotFileDebug ] && DotFileDebug=0 # 若DotFileDebug未定义，则定义之
[ $DotFileDebug -ne 0 ] && echo share .env  >&2

# language
# export LANG=en_US.UTF-8
# export LANGUAGE=
# export LC_CTYPE="en_US.UTF-8"
# export LC_NUMERIC="en_US.UTF-8"
# export LC_TIME="en_US.UTF-8"
# export LC_COLLATE="en_US.UTF-8"
# export LC_MONETARY="en_US.UTF-8"
# export LC_MESSAGES="en_US.UTF-8"
# export LC_PAPER="en_US.UTF-8"
# export LC_NAME="en_US.UTF-8"
# export LC_ADDRESS="en_US.UTF-8"
# export LC_TELEPHONE="en_US.UTF-8"
# export LC_MEASUREMENT="en_US.UTF-8"
# export LC_IDENTIFICATION="en_US.UTF-8"
# export LC_ALL=

# zh_CN:zh # zh_CN.UTF-8 # en_US.UTF-8 # C.UTF-8

if [ ! "$( locale -a 2>/dev/null | grep -E 'C\.utf8|C\.UTF-8' )" = '' ]; then
    export LC_ALL=C.UTF-8
    export LANG=C.UTF-8
elif [ ! "$( locale -a 2>/dev/null | grep -E 'en_US\.utf8|en_US\.UTF-8' )" = '' ]; then
    export LC_ALL=en_US.UTF-8
    export LANG=en_US.UTF-8
# elif [ ! $( locale -a | grep -E 'zh_CN\.utf8|zh_CN\.UTF-8' ) = '' ]; then
    # export LC_ALL=zh_CN.UTF-8
    # export LANG=zh_CN.UTF-8
    # 1. 使用zh_CN.UTF-8，则shell下报错就用中文
    # 2. 使用zh_CN.UTF-8，和.vimrc 中的以下设置不兼容：
    #   listchars=tab:>-,space:· ,trail:· ,extends:→ ,precedes:←
    #   fillchars=vert:│ ,fold:·
fi
# export LANGUAGE=en_US.UTF-8
# 时区
export TZ='Asia/Shanghai'

# sync shared files with all linux, mac, wls computers

_syncENV()
{
    (
        local ENV_path="$1"
        local lock_path="$2"
        local sync_func="$3"

        if ! [ -d "$ENV_path" ]; then
            echo "'$ENV_path' not exists"
        elif [ -f "$lock_path" ]; then
            echo "$ENV_path is syncing now"
        else
            echo "$sync_func $ENV_path"

            touch $lock_path
            local tmp_path=`pwd`
            cd $ENV_path

            $sync_func

            cd $tmp_path
            rm $lock_path
        fi
    ) 2>&1 &
}

_pull()
{
    GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=no" \
        git pull origin master --quiet
}
_push()
{
    if ! [ -z "$(git status --porcelain)" ]; then
    # 还未commit
        git add -A && \
        git commit -m "logout push $(hostname) $(date "+%Y-%m-%d %H:%M:%S")" --quiet &&
        GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=no" \
            git pull origin master --quiet && \
        GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=no" \
            git push origin master --quiet
    elif ! [ -z "$(git cherry -v)" ]; then
    # 已经commit，但本地领先远程仓库，需要push
        GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=no" \
            git pull origin master --quiet && \
        GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=no" \
            git push origin master --quiet
    fi
}

# _test()
# {
    # echo testing
# }

# testENVpull()
# {
    # _syncENV $shareENV $sync_ENV_log/.shareENV.lock _test
# }
# testENVpush()
# {
    # _syncENV $shareENV $sync_ENV_log/.shareENV.lock _test
# }

CONF_pull() { _syncENV "$CONF" "$sync_ENV_log/.CONF.lock" _pull; }
CONF_push() { _syncENV "$CONF" "$sync_ENV_log/.CONF.lock" _push; }

shareENV_pull() { _syncENV "$shareENV" "$sync_ENV_log/.shareENV.lock" _pull; }
shareENV_push() { _syncENV "$shareENV" "$sync_ENV_log/.shareENV.lock" _push; }

junENV_pull() { _syncENV "$junENV" "$sync_ENV_log/.junENV.lock" _pull; }
junENV_push() { _syncENV "$junENV" "$sync_ENV_log/.junENV.lock" _push; }

serverENV_pull() { _syncENV "$serverENV" "$sync_ENV_log/.serverENV.lock" _pull; }
serverENV_push() { _syncENV "$serverENV" "$sync_ENV_log/.serverENV.lock" _push; }

serverENV_private_pull() { _syncENV "$serverENV/serverENV_private" "$sync_ENV_log/.ss.lock" _pull; }
serverENV_private_push() { _syncENV "$serverENV/serverENV_private" "$sync_ENV_log/.ss.lock" _push; }

vim_pull() { _syncENV "$shareENV/app_config/vim" "$sync_ENV_log/.vim.lock" _pull; }
vim_push() { _syncENV "$shareENV/app_config/vim" "$sync_ENV_log/.vim.lock" _push; }

admin_tool_pull() { _syncENV "$serverENV/admin_tool" "$sync_ENV_log/.admin_tool.lock" _pull; }
admin_tool_push() { _syncENV "$serverENV/admin_tool" "$sync_ENV_log/.admin_tool.lock" _push; }

mac_services_pull() { _syncENV ~/Library/Services "$sync_ENV_log/.mac_services.lock" _pull; }
mac_services_push() { _syncENV ~/Library/Services "$sync_ENV_log/.mac_services.lock" _push; }

# login logout
_login_sync()
{
    # 不在tmux中，的登录才设置链接和做备份
    if ! [ -n "$TMUX" ];  then
        echo "======= login_sync start  `date '+%F %T'` ======="
        shareENV_pull     # mac、linux、wls的配置文件同步
        vim_pull         # vim的配置
        if [ "$(uname)" != "Darwin" ]; then
            serverENV_pull    # 服务器的配置文件同步
            admin_tool_pull  # 管理员工具
            serverENV_private_pull  # 翻墙账号同步
            junENV_pull        # jun服务器上专属的环境
            CONF_pull         # HOME 的 备份
        fi
        [ "$(uname)" = "Darwin" ] && mac_services_pull    # mac的service 备份
        [ -f ~/.shell_config/.aliases ] && . ~/.shell_config/.aliases
        echo "======= login_sync end    `date '+%F %T'` ======="
    fi
}
login_sync()
{
    mkdir -p $sync_ENV_log
    (  _login_sync & ) >> $sync_ENV_log/login.log 2>&1
}

_logout_sync()
{
    # 不在tmux中，登出才做备份
    if ! [ -n "$TMUX" ];  then
        echo "======= logout_sync start `date '+%F %T'` ======="
        vim_push         # vim的配置
        shareENV_push     # mac、linux、wls的配置文件同步
        if [ "$(uname)" != "Darwin" ]; then
            serverENV_private_push # 翻号同步
            admin_tool_push  # 管理员工具
            serverENV_push    # 服务器的配置文件同步
            junENV_push       # jun服务器上专属的环境
            CONF_push         # HOME 的 备份
        fi
        [ "$(uname)" = "Darwin" ] && mac_services_push    # mac的service 备份
        echo "======= logout_sync end   `date '+%F %T'` ======="
    fi
}
logout_sync()
{
    mkdir -p $sync_ENV_log
    (  _logout_sync & ) >> $sync_ENV_log/logout.log 2>&1
}

conda_act()
{
    if [ "$conda_path" = "$CONF/anaconda" ] && [[ "$(realpath $conda_path)" =~ /gpfs-flash ]]; then
        # 若$conda_path 放在 /gpfs-flash (多机共享SSD盘) 上, 激活conda base环境要花费好几秒, 主要是下面两个命令费时:
        #    "$conda_path/bin/conda" "shell.${__SHELL}" 'hook' # 这句费时
        #    eval "$__conda_setup"  # 内容=$conda_path/etc/profile.d/conda.sh的内容, 然后执行`conda activate base` , 这最后一句费时
        # 改成下面这样能执行快一点, 只有一句费时
        . $conda_path/etc/profile.d/conda.sh
        conda activate base # 这句执行费时, 因为要大量调用$conda_path上的文件
        # macOS 用此, 终端的prompt会显示 “base” 而不是 "anaconda"
        # ubuntu 用此, 终端的prompt会显示 "anaconda"
    else
        # >>> conda initialize >>>
        # !! Contents within this block are managed by 'conda init' !!
        local __SHELL="$(echo ${SHELL} | awk -F '/' '{print $NF}')"
        local __conda_setup="$("$conda_path/bin/conda" "shell.${__SHELL}" 'hook' 2> /dev/null)"
        if [ $? -eq 0 ]; then
            eval "$__conda_setup"
        else
            if [ -f "$conda_path/etc/profile.d/conda.sh" ]; then
                . "$conda_path/etc/profile.d/conda.sh"
            else
                export PATH="$conda_path/bin:$PATH"
            fi
        fi
        # <<< conda initialize <<<
    fi
}
conda_act

