{"ref":"d306eb64-c1c5-469f-ae6c-9aeeb1b50dc8","syncData":{"version":1,"machineId":"4efb8e68-3d88-4217-8637-b7d296761a47","content":"{\"c.json\":\"{\\n\\t// Place your snippets for c here. Each snippet is defined under a snippet name and has a prefix, body and \\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n\\t\\\"fo\\\": {\\n        \\\"prefix\\\": \\\"fo\\\",\\n        \\\"body\\\": [\\n            \\\"/*\\\",\\n            \\\"                      *\\\",\\n            \\\"                  *       *\\\",\\n            \\\"                *           *\\\",\\n            \\\"              *    _oo8oo_    *\\\",\\n            \\\"             *    o8888888o    *\\\",\\n            \\\"            *     88\\\\\\\" . \\\\\\\"88     *\\\",\\n            \\\"            *     (| -_- |)     *\\\",\\n            \\\"             *    0\\\\\\\\  =  /0    *\\\",\\n            \\\"              * ___/'==='\\\\\\\\___ *\\\",\\n            \\\"              .' \\\\\\\\\\\\\\\\|     |// '.\\\",\\n            \\\"             / \\\\\\\\\\\\\\\\|||  :  |||// \\\\\\\\\\\",\\n            \\\"            / _||||| -:- |||||_ \\\\\\\\\\\",\\n            \\\"           |   | \\\\\\\\\\\\\\\\\\\\\\\\  -  /// |   |\\\",\\n            \\\"           | \\\\\\\\_|  ''\\\\\\\\---/''  |_/ |\\\",\\n            \\\"           \\\\\\\\  .-\\\\\\\\__  '-'  __/-.  /\\\",\\n            \\\"         ___'. .'  /--.--\\\\\\\\  '. .'___\\\",\\n            \\\"      .\\\\\\\"\\\\\\\" '<  '.___\\\\\\\\_<|>_/___.'  >' \\\\\\\"\\\\\\\".\\\",\\n            \\\"     | | :  `- `.:`\\\\\\\\ _ /`:.`/ -`  : | |\\\",\\n            \\\"     \\\\\\\\  \\\\\\\\ `-.   \\\\\\\\_ __\\\\\\\\ /__ _/   .-` /  /\\\",\\n            \\\" =====`-.____`.___ \\\\\\\\_____/ ___.`____.-`=====\\\",\\n            \\\"                   `=---=`\\\",\\n            \\\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\",\\n            \\\"  X X X X X X X X X X X X X X X X X X X X X\\\",\\n            \\\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\",\\n            \\\"      Buddha Bless      No Bug Forever\\\",\\n            \\\"          佛祖保佑          永无疤疙\\\",\\n            \\\"*/\\\",\\n        ],\\n        \\\"description\\\": \\\"Buddha Bless\\\"\\n    },\\n}\",\"cpp.json\":\"{\\n\\t// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and \\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n\\t\\\"fo\\\": {\\n        \\\"prefix\\\": \\\"fo\\\",\\n        \\\"body\\\": [\\n            \\\"/*\\\",\\n            \\\"                      *\\\",\\n            \\\"                  *       *\\\",\\n            \\\"                *           *\\\",\\n            \\\"              *    _oo8oo_    *\\\",\\n            \\\"             *    o8888888o    *\\\",\\n            \\\"            *     88\\\\\\\" . \\\\\\\"88     *\\\",\\n            \\\"            *     (| -_- |)     *\\\",\\n            \\\"             *    0\\\\\\\\  =  /0    *\\\",\\n            \\\"              * ___/'==='\\\\\\\\___ *\\\",\\n            \\\"              .' \\\\\\\\\\\\\\\\|     |// '.\\\",\\n            \\\"             / \\\\\\\\\\\\\\\\|||  :  |||// \\\\\\\\\\\",\\n            \\\"            / _||||| -:- |||||_ \\\\\\\\\\\",\\n            \\\"           |   | \\\\\\\\\\\\\\\\\\\\\\\\  -  /// |   |\\\",\\n            \\\"           | \\\\\\\\_|  ''\\\\\\\\---/''  |_/ |\\\",\\n            \\\"           \\\\\\\\  .-\\\\\\\\__  '-'  __/-.  /\\\",\\n            \\\"         ___'. .'  /--.--\\\\\\\\  '. .'___\\\",\\n            \\\"      .\\\\\\\"\\\\\\\" '<  '.___\\\\\\\\_<|>_/___.'  >' \\\\\\\"\\\\\\\".\\\",\\n            \\\"     | | :  `- `.:`\\\\\\\\ _ /`:.`/ -`  : | |\\\",\\n            \\\"     \\\\\\\\  \\\\\\\\ `-.   \\\\\\\\_ __\\\\\\\\ /__ _/   .-` /  /\\\",\\n            \\\" =====`-.____`.___ \\\\\\\\_____/ ___.`____.-`=====\\\",\\n            \\\"                   `=---=`\\\",\\n            \\\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\",\\n            \\\"  X X X X X X X X X X X X X X X X X X X X X\\\",\\n            \\\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\",\\n            \\\"      Buddha Bless      No Bug Forever\\\",\\n            \\\"          佛祖保佑          永无疤疙\\\",\\n            \\\"*/\\\",\\n        ],\\n        \\\"description\\\": \\\"Buddha Bless\\\"\\n    },\\n\\n\\n}\",\"json.json\":\"{\\n    // Place your snippets for json here. Each snippet is defined under a snippet name and has a prefix, body and \\n    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\n    // same ids are connected.\\n    // Example:\\n    // \\\"Print to console\\\": {\\n    //     \\\"prefix\\\": \\\"log\\\",\\n    //     \\\"body\\\": [\\n    //         \\\"console.log('$1');\\\",\\n    //         \\\"$2\\\"\\n    //     ],\\n    //     \\\"description\\\": \\\"Log output to console\\\"\\n    // }\\n\\n\\n    \\\"define snippet\\\": {\\n        \\\"prefix\\\": \\\"snippet\\\",\\n        \\\"body\\\": [\\n            \\\"\\\\\\\"${1:snippet_name}\\\\\\\": {\\\",\\n            \\\"    \\\\\\\"prefix\\\\\\\": \\\\\\\"${2:snippet_toggle}\\\\\\\",\\\",\\n            \\\"    \\\\\\\"body\\\\\\\": [\\\",\\n            \\\"        \\\\\\\"${3:insert_code}\\\\\\\",\\\",\\n            \\\"    ],\\\",\\n            \\\"    \\\\\\\"description\\\\\\\": \\\\\\\"${4:prompt}\\\\\\\"\\\",\\n            \\\"},\\\"\\n        ],\\n        \\\"description\\\": \\\"snippet template\\\"\\n    }\\n}\",\"latex.json\":\"{\\n    // Place your snippets for latex here. Each snippet is defined under a snippet name and has a prefix, body and\\n    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the\\n    // same ids are connected.\\n    // Example:\\n    // \\\"Print to console\\\": {\\n    //     \\\"prefix\\\": \\\"log\\\",\\n    //     \\\"body\\\": [\\n    //         \\\"console.log('$1');\\\",\\n    //         \\\"$2\\\"\\n    //     ],\\n    //     \\\"description\\\": \\\"Log output to console\\\"\\n    // }\\n\\n\\n    \\\"include_all\\\": {\\n        \\\"prefix\\\": \\\"include_all\\\",\\n        \\\"body\\\": [\\n            \\\"% ---------- basic ----------\\\",\\n            \\\"% color\\\",\\n            \\\"\\\\\\\\usepackage{color}\\\",\\n            \\\"% figure\\\",\\n            \\\"\\\\\\\\usepackage{graphicx}\\\",\\n            \\\"\\\\\\\\usepackage{adjustbox} % include \\\\\\\\adjincludegraphics\\\",\\n            \\\"\\\\\\\\usepackage{wrapfig}   % include \\\\\\\\wrapfigure \\\\\\\\ wraptable \\\",\\n            \\\"\\\\\\\\usepackage{floatflt}  % include \\\\\\\\floatingfigure \\\\\\\\floatingtable\\\",\\n            \\\"% equation\\\",\\n            \\\"\\\\\\\\usepackage{amsmath,amssymb}  % define this before the line numbering\\\",\\n            \\\"\\\\\\\\usepackage{bm}        % include \\\\\\\\bm{}\\\",\\n            \\\"% table\\\",\\n            \\\"\\\\\\\\usepackage{booktabs}  % include \\\\\\\\midrule\\\",\\n            \\\"\\\\\\\\usepackage{multirow}  % include \\\\\\\\multirow \\\\\\\\multicolumn\\\",\\n            \\\"\\\\\\\\newcommand{\\\\\\\\tabincell}[2]{\\\\\\\\begin{tabular}{@{}#1@{}}#2\\\\\\\\end{tabular}} % define command for multirow table cell centering vertically\\\",\\n            \\\"% enable \\\\\\\\footnote{} in tabular environment\\\",\\n            \\\"\\\\\\\\usepackage{footnote}\\\",\\n            \\\"\\\\\\\\makesavenoteenv{tabular}  % enable footnote in tabular environment\\\",\\n            \\\"\\\\\\\\makesavenoteenv{table}    % enable footnote in table environment\\\",\\n            \\\"% algorithm\\\",\\n            \\\"\\\\\\\\usepackage{algorithm}\\\",\\n            \\\"% \\\\\\\\usepackage{algorithmic}\\\",\\n            \\\"\\\\\\\\usepackage{algpseudocode} % http://ctan.org/pkg/algorithmicx\\\",\\n            \\\"% comment\\\",\\n            \\\"\\\\\\\\usepackage{comment}   % include \\\\\\\\begin{comment} \\\\\\\\end{comment}\\\",\\n            \\\"\\\",\\n            \\\"% -------- modifier symbol marker for \\\\\\\\thanks ---------\\\",\\n            \\\"% marked with \\\\\\\\ast (five-pointed *) † ‡ § ¶ ‖ ** †† ‡‡\\\",\\n            \\\"% e.g. \\\\\\\\author{Author1\\\\\\\\thanks{They contributed equally.} \\\\\\\\and Author2$^{\\\\\\\\ast}$}\\\",\\n            \\\"\\\\\\\\usepackage{footmisc}\\\",\\n            \\\"\\\\\\\\DefineFNsymbols{mySymbols}{{\\\\\\\\ensuremath\\\\\\\\ast}{\\\\\\\\ensuremath\\\\\\\\dagger}\\\",\\n            \\\"{\\\\\\\\ensuremath\\\\\\\\ddagger}{\\\\\\\\ensuremath\\\\\\\\mathsection}{\\\\\\\\ensuremath\\\\\\\\mathparagraph}\\\",\\n            \\\"{\\\\\\\\ensuremath\\\\\\\\parallel}{\\\\\\\\ast\\\\\\\\ast}{\\\\\\\\ensuremath{\\\\\\\\dagger\\\\\\\\dagger}}{\\\\\\\\ensuremath{\\\\\\\\ddagger\\\\\\\\ddagger}}}\\\",\\n            \\\"\\\\\\\\setfnsymbol{mySymbols}\\\",\\n            \\\"\\\",\\n            \\\"% ------- tips for \\\\\\\\institute ---------\\\",\\n            \\\"% % manually mark the institute for each author, and add email after all insitutes\\\",\\n            \\\"% \\\\\\\\author{Author1$^{1,2}$ \\\\\\\\and Author2$^2$ \\\\\\\\and Author3$^{1}$ \\\\\\\\and Author4$^{2,3}$}\\\",\\n            \\\"% \\\\\\\\institute{\\\",\\n            \\\"%    $^1$ Insitute1\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\n            \\\"%    $^2$ Insitute2\\\\\\\\quad $^2$ Insitute3\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\n            \\\"%    \\\\\\\\email{\\\",\\n            \\\"%        \\\\\\\\{author1, author3\\\\\\\\\\\\\\\\}@inst1.com\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\n            \\\"%        \\\\\\\\{author2, author4\\\\\\\\\\\\\\\\}@inst2.com\\\",\\n            \\\"%    }\\\",\\n            \\\"% }\\\",\\n            \\\"% ------- cross file reference -----\\\",\\n            \\\"\\\\\\\\usepackage{xr}\\\",\\n            \\\"\\\\\\\\makeatletter\\\",\\n            \\\"\\\\\\\\newcommand*{\\\\\\\\addFileDependency}[1]{\\\",\\n            \\\"    \\\\\\\\typeout{(#1)}\\\",\\n            \\\"    \\\\\\\\@addtofilelist{#1}\\\",\\n            \\\"    \\\\\\\\IfFileExists{#1}{}{\\\\\\\\typeout{No file #1.}}\\\",\\n            \\\"}\\\",\\n            \\\"\\\\\\\\makeatother\\\",\\n            \\\"\\\\\\\\newcommand*{\\\\\\\\myexternaldocument}[1]{\\\",\\n            \\\"    \\\\\\\\externaldocument{#1}\\\",\\n            \\\"    \\\\\\\\addFileDependency{#1.tex}\\\",\\n            \\\"    \\\\\\\\addFileDependency{#1.aux}\\\",\\n            \\\"}\\\",\\n            \\\"% put all the external documents here!\\\",\\n            \\\"\\\\\\\\myexternaldocument{${1:supplementary}}\\\",\\n            \\\"% ----------- user highlight ---------\\\",\\n            \\\"% magenta red blue ...\\\",\\n            \\\"\\\\\\\\newcommand{\\\\\\\\lhy}[1]{{\\\\\\\\color{blue}{lhy: #1}}}\\\",\\n        ],\\n        \\\"description\\\": \\\"include_all\\\"\\n    },\\n\\n    \\\"tsail\\\": {\\n        \\\"prefix\\\": \\\"tsail\\\",\\n        \\\"body\\\": [\\n            \\\"Dept. of Comp. Sci. and Tech., BNRist Center, Inst. for AI, THBI Lab, Tsinghua University, Beijing 100084, China\\\",\\n        ],\\n        \\\"description\\\": \\\"institute information for tsail\\\"\\n    },\\n\\n    \\\"vspace\\\": {\\n        \\\"prefix\\\": \\\"vspace\\\",\\n        \\\"body\\\": [\\n            \\\"\\\\\\\\vspace{${1:-1}em} % em: height of 'M'\\\",\\n        ],\\n        \\\"description\\\": \\\"vspace\\\"\\n    },\\n\\n    \\\"vskip\\\": {\\n        \\\"prefix\\\": \\\"vskip\\\",\\n        \\\"body\\\": [\\n            \\\"\\\\\\\\vskip ${1:-1}em % em: height of 'M'\\\",\\n        ],\\n        \\\"description\\\": \\\"vskip\\\"\\n    },\\n\\n    \\\"extrafootnote\\\": {\\n        \\\"prefix\\\": \\\"extrafootnote\\\",\\n        \\\"body\\\": [\\n            \\\"% extra foootnote without heading mark and mark in text\\\",\\n            \\\"% use \\\\\\\\extrafootnote{footnote content}\\\",\\n            \\\"\\\\\\\\newcommand\\\\\\\\extrafootnote[1]{\\\",\\n            \\\"    \\\\\\\\begingroup\\\",\\n            \\\"    \\\\\\\\renewcommand\\\\\\\\thefootnote{}\\\\\\\\footnote{#1}\\\",\\n            \\\"    \\\\\\\\addtocounter{footnote}{-1}\\\",\\n            \\\"    \\\\\\\\endgroup\\\",\\n            \\\"}\\\",\\n        ],\\n        \\\"description\\\": \\\"extra footnote without heading mark and mark in text\\\"\\n    },\\n\\n    \\\"multirow\\\": {\\n        \\\"prefix\\\": \\\"multirow\\\",\\n        \\\"body\\\": [\\n            \\\"\\\\\\\\multirow{${1:#row}}{*}{\\\\\\\\tabincell{c}{${2:content}}}\\\",\\n        ],\\n        \\\"description\\\": \\\"multirow\\\"\\n    },\\n\\n\\n    \\\"multicolumn\\\": {\\n        \\\"prefix\\\": \\\"multicolumn\\\",\\n        \\\"body\\\": [\\n            \\\"\\\\\\\\multicolumn{${1:#col}}{${2:c|}}{${3:content}}\\\",\\n        ],\\n        \\\"description\\\": \\\"multicolumn\\\"\\n    },\\n\\n    \\\"cmidrule\\\": {\\n        \\\"prefix\\\": \\\"cmidrule\\\",\\n        \\\"body\\\": [\\n            \\\"\\\\\\\\cmidrule{${1:#col-1}-${2:#col-2}}\\\",\\n        ],\\n        \\\"description\\\": \\\"cmidrule\\\"\\n    },\\n\\n\\n    \\\"figure\\\": {\\n        \\\"prefix\\\": \\\"figure\\\",\\n        \\\"body\\\": [\\n            \\\"\\\\\\\\begin{figure}[thbp]\\\",\\n            \\\"    \\\\\\\\centering\\\",\\n            \\\"    \\\\\\\\includegraphics[width=${1:1}\\\\\\\\textwidth]{${2:img/}}\\\",\\n            \\\"    \\\\\\\\caption{$3}\\\",\\n            \\\"    \\\\\\\\label{fig:$4}\\\",\\n            \\\"\\\\\\\\end{figure}\\\"\\n        ],\\n        \\\"description\\\": \\\"figure\\\"\\n    },\\n\\n    \\\"floatingfigure\\\": {\\n        \\\"prefix\\\": \\\"floatingfigure\\\",\\n        \\\"body\\\": [\\n            \\\"\\\\\\\\begin{floatingfigure}[r]{${1:0.5}\\\\\\\\textwidth}\\\",\\n            \\\"    \\\\\\\\centering\\\",\\n            \\\"    \\\\\\\\includegraphics[width=${2:0.5}\\\\\\\\textwidth]{${3:img/}}\\\",\\n            \\\"    \\\\\\\\caption{$4}\\\",\\n            \\\"    \\\\\\\\label{fig:$5}\\\",\\n            \\\"\\\\\\\\end{floatingfigure}\\\"\\n        ],\\n        \\\"description\\\": \\\"floatingfigure\\\"\\n    },\\n\\n    \\\"table\\\": {\\n        \\\"prefix\\\": \\\"table\\\",\\n        \\\"body\\\": [\\n            \\\"% \\\\\\\\usepackage{floatflt}\\\",\\n            \\\"\\\\\\\\begin{table}[thbp]\\\",\\n            \\\"    \\\\\\\\label{tab:$1}\\\",\\n            \\\"    \\\\\\\\caption{$2}\\\",\\n            \\\"    \\\\\\\\begin{center}\\\",\\n            \\\"    \\\\\\\\begin{tabular}{${3:lcc}}\\\",\\n            \\\"    \\\\\\\\toprule\\\",\\n            \\\"    ${4: & & }\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\n            \\\"    \\\\\\\\midrule\\\",\\n            \\\"    ${5: & & }\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\n            \\\"    \\\\\\\\hline\\\",\\n            \\\"    ${6: & & }\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\n            \\\"    \\\\\\\\bottomrule\\\",\\n            \\\"    \\\\\\\\end{tabular}\\\",\\n            \\\"    \\\\\\\\end{center}\\\",\\n            \\\"\\\\\\\\end{table}\\\",\\n        ],\\n        \\\"description\\\": \\\"table\\\"\\n    },\\n\\n    \\\"floatingtable\\\": {\\n        \\\"prefix\\\": \\\"floatingtable\\\",\\n        \\\"body\\\": [\\n            \\\"% \\\\\\\\usepackage{floatflt}\\\",\\n            \\\"\\\\\\\\begin{floatingtable}[r]\\\",\\n            \\\"    {\\\",\\n            \\\"    \\\\\\\\begin{tabular}{${1:lcc}}\\\",\\n            \\\"    \\\\\\\\toprule\\\",\\n            \\\"    ${2: & & }\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\n            \\\"    \\\\\\\\midrule\\\",\\n            \\\"    ${3: & & }\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\n            \\\"    \\\\\\\\hline\\\",\\n            \\\"    ${4: & & }\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\n            \\\"    \\\\\\\\bottomrule\\\",\\n            \\\"    \\\\\\\\end{tabular}\\\",\\n            \\\"    }\\\",\\n            \\\"    \\\\\\\\centering\\\",\\n            \\\"    \\\\\\\\caption{$5}\\\",\\n            \\\"    \\\\\\\\label{tab:$6}\\\",\\n            \\\"\\\\\\\\end{floatingtable}\\\"\\n        ],\\n        \\\"description\\\": \\\"floatingtable\\\"\\n    },\\n\\n    \\\"figure_right_caption\\\": {\\n        \\\"prefix\\\": \\\"figure_right_caption\\\",\\n        \\\"body\\\": [\\n            \\\"\\\\\\\\begin{figure}[thbp]\\\",\\n            \\\"\\\\\\\\begin{minipage}[t]{${1:0.5}\\\\\\\\textwidth}\\\",\\n            \\\"\\\\\\\\centering\\\",\\n            \\\"\\\\\\\\vspace{0pt} \\\\\\\\includegraphics[width=1\\\\\\\\textwidth]{${2:img/}}\\\",\\n            \\\"% \\\\\\\\adjincludegraphics[valign=t,width=1\\\\\\\\textwidth]{${2:img/}}\\\",\\n            \\\"% \\\\\\\\usepackage{adjustbox}\\\",\\n            \\\"\\\\\\\\label{fig:$3}\\\",\\n            \\\"\\\\\\\\end{minipage}\\\",\\n            \\\"\\\\\\\\hfill\\\",\\n            \\\"\\\\\\\\begin{minipage}[t]{${4:0.5}\\\\\\\\textwidth}\\\",\\n            \\\"\\\\\\\\caption{$5}\\\",\\n            \\\"\\\\\\\\end{minipage}\\\",\\n            \\\"\\\\\\\\end{figure}\\\",\\n        ],\\n        \\\"description\\\": \\\"figure_right_caption\\\"\\n    },\\n\\n    \\\"algorithm\\\": {\\n        \\\"prefix\\\": \\\"algorithm\\\",\\n        \\\"body\\\": [\\n            \\\"% \\\\\\\\usepackage{algorithm}\\\",\\n            \\\"% \\\\\\\\usepackage{algpseudocode}% http://ctan.org/pkg/algorithmicx\\\",\\n            \\\"% algorithmic doc: https://en.wikibooks.org/wiki/LaTeX/Algorithms\\\",\\n            \\\"\\\\\\\\begin{algorithm}[t]\\\",\\n            \\\"\\\\\\\\caption{$1}\\\",\\n            \\\"\\\\\\\\label{alg:$2}\\\",\\n            \\\"\\\\\\\\begin{algorithmic}[1]\\\",\\n            \\\"\\\\\\\\For{$3}\\\",\\n            \\\"    \\\\\\\\If{$4}\\\",\\n            \\\"        \\\\\\\\State $5\\\",\\n            \\\"    \\\\\\\\ElsIf{$6}\\\",\\n            \\\"        \\\\\\\\State $7\\\",\\n            \\\"    \\\\\\\\ElsIf{$8}\\\",\\n            \\\"        \\\\\\\\State $9\\\",\\n            \\\"    \\\\\\\\EndIf\\\",\\n            \\\"\\\\\\\\EndFor\\\",\\n            \\\"\\\\\\\\end{algorithmic}\\\",\\n            \\\"\\\\\\\\end{algorithm}\\\",\\n        ],\\n        \\\"description\\\": \\\"algorithm\\\"\\n    },\\n\\n}\",\"latexmkrc.code-snippets\":\"{\\n    // Place your 全局 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and\\n    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope\\n    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is\\n    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.\\n    // Placeholders with the same ids are connected.\\n    // Example:\\n    // \\\"Print to console\\\": {\\n    //     \\\"scope\\\": \\\"javascript,typescript\\\",\\n    //     \\\"prefix\\\": \\\"log\\\",\\n    //     \\\"body\\\": [\\n    //         \\\"console.log('$1');\\\",\\n    //         \\\"$2\\\"\\n    //     ],\\n    //     \\\"description\\\": \\\"Log output to console\\\"\\n    // }\\n    \\\"init latexmkrc\\\": {\\n        // \\\"scope\\\": \\\"javascript,typescript\\\",\\n        \\\"prefix\\\": \\\"latexmkrc\\\",\\n        \\\"body\\\": [\\n            \\\"add_cus_dep( 'tex', 'aux', 0, 'makeexternaldocument' );\\\",\\n            \\\"\\\",\\n            \\\"sub makeexternaldocument {\\\",\\n            \\\"    # if the dependency isn't one of the files that this latexmk run will consider, process it\\\",\\n            \\\"    # without this test, we would get an infinite loop!\\\",\\n            \\\"    if (!(\\\\\\\\$root_filename eq \\\\\\\\$_[0]))\\\",\\n            \\\"    {   # PLEASE ENABLE ONLY ONE OF THE FOLLOWING\\\",\\n            \\\"        # DEPENDING ON THE ENGINE YOU'RE USING\\\",\\n            \\\"\\\",\\n            \\\"        # FOR PDFLATEX\\\",\\n            \\\"        system( \\\\\\\"latexmk -pdf \\\\\\\\\\\\\\\"\\\\\\\\$_[0]\\\\\\\\\\\\\\\"\\\\\\\" );\\\",\\n            \\\"\\\",\\n            \\\"        # FOR LATEX+DVIPDF\\\",\\n            \\\"        # system( \\\\\\\"latexmk \\\\\\\\\\\\\\\"\\\\\\\\$_[0]\\\\\\\\\\\\\\\"\\\\\\\" );\\\",\\n            \\\"\\\",\\n            \\\"        # FOR XELATEX\\\",\\n            \\\"        # system( \\\\\\\"latexmk -xelatex \\\\\\\\\\\\\\\"\\\\\\\\$_[0]\\\\\\\\\\\\\\\"\\\\\\\" );\\\",\\n            \\\"\\\",\\n            \\\"        # FOR LUALATEX\\\",\\n            \\\"        # system( \\\\\\\"latexmk -lualatex \\\\\\\\\\\\\\\"\\\\\\\\$_[0]\\\\\\\\\\\\\\\"\\\\\\\" );\\\",\\n            \\\"    }\\\",\\n            \\\"}\\\"\\n        ],\\n        \\\"description\\\": \\\"Log output to console\\\"\\n    }\\n}\\n\",\"lines.code-snippets\":\"{\\n\\t// Place your 全局 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and \\n\\t// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope \\n\\t// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is \\n\\t// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: \\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. \\n\\t// Placeholders with the same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"scope\\\": \\\"javascript,typescript\\\",\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n\\n\\t\\\"--- line\\\": {\\n\\t\\t// \\\"scope\\\": \\\"\\\",\\n\\t\\t\\\"prefix\\\": \\\"single_line\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"----------------------------------------------------------------------------------------------\\\",\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"--- line\\\"\\n\\t},\\n\\n\\t\\\"=== line\\\": {\\n\\t\\t// \\\"scope\\\": \\\"\\\",\\n\\t\\t\\\"prefix\\\": \\\"double_line\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"==============================================================================================\\\",\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"=== line\\\"\\n\\t}\\n}\",\"markdown.json\":\"{\\n\\t// Place your snippets for markdown here. Each snippet is defined under a snippet name and has a prefix, body and\\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the\\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n\\n\\n\\t// \\\"math-block\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"math block\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"$$\\\",\\n\\t// \\t\\t\\\"$1\\\",\\n\\t// \\t\\t\\\"$$\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Insert a Math Block\\\"\\n\\t// }\\n}\",\"python.json\":\"{\\n    // Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and\\n    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the\\n    // same ids are connected.\\n    // Example:\\n    // \\\"Print to console\\\": {\\n    //     \\\"prefix\\\": \\\"log\\\",\\n    //     \\\"body\\\": [\\n    //         \\\"console.log('$1');\\\",\\n    //         \\\"$2\\\"\\n    //     ],\\n    //     \\\"description\\\": \\\"Log output to console\\\"\\n    // }\\n    \\\"python begining\\\": {\\n        \\\"prefix\\\": \\\"py\\\",\\n        \\\"body\\\": [\\n            \\\"#!/usr/bin/env python\\\",\\n            \\\"# -*- coding: utf-8 -*-\\\",\\n        ],\\n        \\\"description\\\": \\\"python begining\\\"\\n    },\\n    \\\"future print\\\": {\\n        \\\"prefix\\\": \\\"future_print\\\",\\n        \\\"body\\\": [\\n            \\\"from __future__ import print_function\\\",\\n        ],\\n        \\\"description\\\": \\\"import python3's print into python2\\\"\\n    },\\n    \\\"json_save_py2\\\": {\\n        \\\"prefix\\\": \\\"json_save_py2\\\",\\n        \\\"body\\\": [\\n            \\\"with open(${2:file_path.json}, 'w') as f:\\\",\\n            \\\"   json.dump(${1:object}, f, indent=4, ensure_ascii=False, encoding='utf-8')\\\",\\n        ],\\n        \\\"description\\\": \\\"save to json file, python2\\\"\\n    },\\n    \\\"json_save_py3\\\": {\\n        \\\"prefix\\\": \\\"json_save_py3\\\",\\n        \\\"body\\\": [\\n            \\\"with open(${2:file_path.json}, 'w') as f:\\\",\\n            \\\"   json.dump(${1:object}, f, indent=4, ensure_ascii=False)\\\",\\n        ],\\n        \\\"description\\\": \\\"save to json file, python3\\\"\\n    },\\n    \\\"json_save_string_py2\\\": {\\n        \\\"prefix\\\": \\\"json_save_string_py2\\\",\\n        \\\"body\\\": [\\n            \\\"json.dumps(${1:object}, indent=4, ensure_ascii=False, encoding='utf-8')\\\",\\n        ],\\n        \\\"description\\\": \\\"convert to json string, python2\\\"\\n    },\\n    \\\"json_save_string_py3\\\": {\\n        \\\"prefix\\\": \\\"json_save_string_py3\\\",\\n        \\\"body\\\": [\\n            \\\"json.dumps(${1:object}, indent=4, ensure_ascii=False)\\\",\\n        ],\\n        \\\"description\\\": \\\"convert to json string, python3\\\"\\n    },\\n    \\\"mkdir\\\": {\\n        \\\"prefix\\\": \\\"mkdir\\\",\\n        \\\"body\\\": [\\n            \\\"os.makedirs(${1:path}, exist_ok=True) # if no such path exists, iteratively created the dir\\\",\\n        ],\\n        \\\"description\\\": \\\"iteratively make a dir if it does not exist\\\"\\n    },\\n    \\\"here\\\": {\\n        \\\"prefix\\\": \\\"here\\\",\\n        \\\"body\\\": [\\n            \\\"os.path.dirname(os.path.realpath(__file__)) ${1:# get absoltae path to the dir this file is in}\\\",\\n        ],\\n        \\\"description\\\": \\\"get absoltae path to the dir this file is in\\\"\\n    },\\n    \\\"plt\\\": {\\n        \\\"prefix\\\": \\\"plt\\\",\\n        \\\"body\\\": [\\n            \\\"import matplotlib.pyplot as plt\\\",\\n        ],\\n        \\\"description\\\": \\\"import plt\\\"\\n    },\\n    \\\"hanzi\\\": {\\n        \\\"prefix\\\": \\\"hanzi\\\",\\n        \\\"body\\\": [\\n            \\\"[^\\\\\\\\x00-\\\\\\\\xff]\\\",\\n        ],\\n        \\\"description\\\": \\\"regex for chinese character\\\"\\n    },\\n    \\\"ipdb\\\": {\\n        \\\"prefix\\\": \\\"ipdb\\\",\\n        \\\"body\\\": [\\n            \\\"__import__('ipdb').set_trace()\\\",\\n        ],\\n        \\\"description\\\": \\\"insert ipdb in code\\\"\\n    },\\n    \\\"fo\\\": {\\n        \\\"prefix\\\": \\\"fo\\\",\\n        \\\"body\\\": [\\n            \\\"#                      *\\\",\\n            \\\"#                  *       *\\\",\\n            \\\"#                *           *\\\",\\n            \\\"#              *    _oo8oo_    *\\\",\\n            \\\"#             *    o8888888o    *\\\",\\n            \\\"#            *     88\\\\\\\" . \\\\\\\"88     *\\\",\\n            \\\"#            *     (| -_- |)     *\\\",\\n            \\\"#             *    0\\\\\\\\  =  /0    *\\\",\\n            \\\"#              * ___/'==='\\\\\\\\___ *\\\",\\n            \\\"#              .' \\\\\\\\\\\\\\\\|     |// '.\\\",\\n            \\\"#             / \\\\\\\\\\\\\\\\|||  :  |||// \\\\\\\\\\\",\\n            \\\"#            / _||||| -:- |||||_ \\\\\\\\\\\",\\n            \\\"#           |   | \\\\\\\\\\\\\\\\\\\\\\\\  -  /// |   |\\\",\\n            \\\"#           | \\\\\\\\_|  ''\\\\\\\\---/''  |_/ |\\\",\\n            \\\"#           \\\\\\\\  .-\\\\\\\\__  '-'  __/-.  /\\\",\\n            \\\"#         ___'. .'  /--.--\\\\\\\\  '. .'___\\\",\\n            \\\"#      .\\\\\\\"\\\\\\\" '<  '.___\\\\\\\\_<|>_/___.'  >' \\\\\\\"\\\\\\\".\\\",\\n            \\\"#     | | :  `- `.:`\\\\\\\\ _ /`:.`/ -`  : | |\\\",\\n            \\\"#     \\\\\\\\  \\\\\\\\ `-.   \\\\\\\\_ __\\\\\\\\ /__ _/   .-` /  /\\\",\\n            \\\"# =====`-.____`.___ \\\\\\\\_____/ ___.`____.-`=====\\\",\\n            \\\"#                   `=---=`\\\",\\n            \\\"# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\",\\n            \\\"#  X X X X X X X X X X X X X X X X X X X X X\\\",\\n            \\\"# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\",\\n            \\\"#      Buddha Bless      No Bug Forever\\\",\\n            \\\"#          佛祖保佑          永无疤疙\\\",\\n        ],\\n        \\\"description\\\": \\\"Buddha Bless\\\"\\n    },\\n    // \\\"ifmain\\\": {\\n    //     \\\"prefix\\\": \\\"ifmain\\\",\\n    //     \\\"body\\\": [\\n    //         \\\"if __name__ == '__main__':\\\",\\n    //     ],\\n    //     \\\"description\\\": \\\"ifmain\\\"\\n    // }\\n}\",\"shellscript.json\":\"{\\n    // Place your snippets for shellscript here. Each snippet is defined under a snippet name and has a prefix, body and\\n    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the\\n    // same ids are connected.\\n    // Example:\\n    // \\\"Print to console\\\": {\\n    //     \\\"prefix\\\": \\\"log\\\",\\n    //     \\\"body\\\": [\\n    //         \\\"console.log('$1');\\\",\\n    //         \\\"$2\\\"\\n    //     ],\\n    //     \\\"description\\\": \\\"Log output to console\\\"\\n    // }\\n    \\\"bash\\\": {\\n        \\\"prefix\\\": \\\"bash\\\",\\n        \\\"body\\\": [\\n            \\\"#!/usr/bin/env bash\\\",\\n        ],\\n        \\\"description\\\": \\\"bash interpretor\\\"\\n    },\\n    \\\"zsh\\\": {\\n        \\\"prefix\\\": \\\"zsh\\\",\\n        \\\"body\\\": [\\n            \\\"#!/usr/bin/env zsh\\\",\\n        ],\\n        \\\"description\\\": \\\"zsh interpretor\\\"\\n    },\\n    \\\"background run\\\": {\\n        \\\"prefix\\\": \\\"houtai\\\",\\n        \\\"body\\\": [\\n            \\\"( (\\\",\\n            \\\"    ${1:# content}\\\",\\n            \\\") & ) > ${2:/dev/null} 2>&1\\\",\\n        ],\\n        \\\"description\\\": \\\"run in background\\\"\\n    },\\n    \\\"parallel\\\": {\\n        \\\"prefix\\\": \\\"parallel\\\",\\n        \\\"body\\\": [\\n            \\\"rand=\\\\\\\"\\\\\\\\$RANDOM\\\\\\\"\\\",\\n            \\\"log_file=\\\\\\\"/tmp/parallels\\\\\\\\$rand\\\\\\\"\\\",\\n            \\\"(\\\",\\n            \\\"    ${1:for ...}; do\\\",\\n            \\\"    {\\\",\\n            \\\"        ${2:# content}\\\",\\n            \\\"    } >> 2>&1 \\\\\\\\$log_file &\\\",\\n            \\\"    done\\\",\\n            \\\"    wait\\\",\\n            \\\") >& ${3:/dev/null} # stdout, warning, error\\\",\\n            \\\"cat \\\\\\\\$log_file\\\",\\n            \\\"rm \\\\\\\\$log_file\\\",\\n        ],\\n        \\\"description\\\": \\\"run parallelly and collect output\\\"\\n    },\\n    \\\"here\\\": {\\n        \\\"prefix\\\": \\\"here\\\",\\n        \\\"body\\\": [\\n            \\\"# get absolute path to the dir this is in, work in bash, zsh\\\",\\n            \\\"# if you want transfer symbolic link to true path, just change `pwd` to `pwd -P`\\\",\\n            \\\"${1:here}=$(cd \\\\\\\"\\\\\\\\$(dirname \\\\\\\"${BASH_SOURCE[0]-\\\\\\\\$0}\\\\\\\")\\\\\\\"; pwd)\\\",\\n            \\\"\\\",\\n            \\\"# release this variable in the end of file\\\",\\n            \\\"unset -v $1\\\",\\n        ],\\n        \\\"description\\\": \\\"prompt\\\"\\n    },\\n    \\\"argparse\\\": {\\n        \\\"prefix\\\": \\\"argparse\\\",\\n        \\\"body\\\": [\\n            \\\"\\\",\\n            \\\"# 使用规则\\\",\\n            \\\"# bash/zsh getopt_demo.sh 一堆参数，其前中后均可有 余参数\\\",\\n            \\\"# 格式化参数：以'-'开头，必需符合本代码的解析要求\\\",\\n            \\\"    #             短参数                           长参数\\\",\\n            \\\"    # 无选项       -a                              --a-long\\\",\\n            \\\"    # 必有选项     -bss          -b ss             --b-long ss\\\",\\n            \\\"    #             -b'sds sds'   -b 'sds sds'      --b-long 'sds sds'\\\",\\n            \\\"    # 可有选项若无  -c                              --c-long\\\",\\n            \\\"    # 可有选项若有  -css          -c'sds sds'  只可短参数，选项与参数间不得有空格\\\",\\n            \\\"# 余参数：不以'-'开头\\\",\\n            \\\"\\\",\\n            \\\"# 参数预处理\\\",\\n            \\\"TEMP=\\\\\\\\$(getopt \\\\\\\\\\\",\\n            \\\"    -o      ${1:短参数 形如 ab:c::} \\\\\\\\\\\",\\n            \\\"    --long  ${2:长参数 形如 a-long,b-long:,c-long::} \\\\\\\\\\\",\\n            \\\"    -n      '参数解析错误' \\\\\\\\\\\",\\n            \\\"    -- \\\\\\\"\\\\\\\\$@\\\\\\\")\\\",\\n            \\\"# 写法\\\",\\n            \\\"    #   -o     短参数 不需要分隔符\\\",\\n            \\\"    #   --long 长参数 用','分隔\\\",\\n            \\\"    #   ``无选项  `:`必有选项  `::` 可有选项\\\",\\n            \\\"if [ \\\\\\\\$? != 0 ] ; then echo \\\\\\\"格式化的参数解析错误，正在退出\\\\\\\" >&2 ; exit 1 ; fi\\\",\\n            \\\"eval set -- \\\\\\\"\\\\\\\\$TEMP\\\\\\\" # 将\\\\\\\\$TEMP复制给 \\\\\\\\$1, \\\\\\\\$2, ...\\\",\\n            \\\"\\\",\\n            \\\"\\\",\\n            \\\"# 处理参数\\\",\\n            \\\"while true ; do case \\\\\\\"\\\\\\\\$1\\\\\\\" in\\\",\\n            \\\"    ${4:# 处理格式化的参数}\\\",\\n            \\\"    # '--'后是 余参数\\\",\\n            \\\"    --) shift ; break ;;\\\",\\n            \\\"    # 处理参数的代码错误\\\",\\n            \\\"    *) echo \\\\\\\"参数处理错误\\\\\\\" ; exit 1 ;;\\\",\\n            \\\"esac ; done\\\",\\n            \\\"\\\",\\n            \\\"\\\",\\n            \\\"# 余下参数\\\",\\n            \\\"for i in \\\\\\\"\\\\\\\\$@\\\\\\\"; do\\\",\\n            \\\"${5:# 处理余下参数}\\\\\\\"\\\\\\\\$i\\\\\\\"\\\",\\n            \\\"done\\\",\\n            \\\"\\\",\\n        ],\\n        \\\"description\\\": \\\"the template of getopt argparsing, long arg is supported\\\"\\n    },\\n    \\\"noopt\\\": {\\n        \\\"prefix\\\": \\\"noopt\\\",\\n        \\\"body\\\": [\\n            \\\"# 无选项\\\",\\n            \\\"-${1:短参数}|--${2:长参数})  ${3:参数处理} ; shift ;;\\\",\\n        ],\\n        \\\"description\\\": \\\"an argument with no option\\\"\\n    },\\n    \\\"hasopt\\\": {\\n        \\\"prefix\\\": \\\"hasopt\\\",\\n        \\\"body\\\": [\\n            \\\"# 必有选项\\\",\\n            \\\"-${1:短参数}|--${2:长参数})  ${3:选项处理}\\\\\\\"\\\\\\\\$2\\\\\\\" ; shift 2 ;;\\\",\\n        ],\\n        \\\"description\\\": \\\"an argument with an option\\\"\\n    },\\n    \\\"optopt\\\": {\\n        \\\"prefix\\\": \\\"optopt\\\",\\n        \\\"body\\\": [\\n            \\\"# 可省选项\\\",\\n            \\\"-${1:短参数}|--${2:长参数}) case \\\\\\\"\\\\\\\\$2\\\\\\\" in\\\",\\n            \\\"    # 无选项\\\",\\n            \\\"    \\\\\\\"\\\\\\\")  ${3:无选项处理} ; shift 2 ;;\\\",\\n            \\\"    # 有选项\\\",\\n            \\\"    *)   ${4:选项处理\\\\\\\"\\\\\\\\$2\\\\\\\"} ; shift 2 ;;  esac ;;\\\",\\n        ],\\n        \\\"description\\\": \\\"an argument with an optional option\\\"\\n    },\\n    \\\"getchar\\\": {\\n        \\\"prefix\\\": \\\"getchar\\\",\\n        \\\"body\\\": [\\n            \\\"${1:answer}=\\\\\\\\$(bash -c \\\\\\\"read -n 1 -p '${2:提示内容}? ${3:Y/N} ' c; echo \\\\\\\\\\\\\\\\\\\\\\\\$c\\\\\\\"); echo\\\",\\n        ],\\n        \\\"description\\\": \\\"get one char\\\"\\n    },\\n    \\\"getline\\\": {\\n        \\\"prefix\\\": \\\"getline\\\",\\n        \\\"body\\\": [\\n            \\\"${1:answer}=\\\\\\\\$(bash -c \\\\\\\"read -p '${2:提示内容}? ' c; echo \\\\\\\\\\\\\\\\\\\\\\\\$c\\\\\\\");\\\",\\n        ],\\n        \\\"description\\\": \\\"get one line\\\"\\n    },\\n    \\\"ifmac\\\": {\\n        \\\"prefix\\\": \\\"ifmac\\\",\\n        \\\"body\\\": [\\n            \\\"if [ \\\\\\\"\\\\\\\\$(uname)\\\\\\\" = \\\\\\\"Darwin\\\\\\\" ];\\\",\\n        ],\\n        \\\"description\\\": \\\"prompt\\\"\\n    },\\n}\",\"source.markdown.math.json\":\"{\\n\\t// Place your snippets for source.markdown.math here. Each snippet is defined under a snippet name and has a prefix, body and \\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n}\"}"}}